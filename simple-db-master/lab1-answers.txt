Writeup Lab1

Lab1 has some base classes (Tuple, TupleDesc, Catalog, BufferPool, HeapPage, HeapFile, SeqScan) which we will build a simple database management system(DBMS). Basely, our job is making a DBMS that we can manage a number of (.txt -> .dat) files which we can use a query command to return a target data which we look for. First, Tuple gets instances (fieldType, fieldName) and maintains this instances about the contents from TupleDesc. TupleDesc class describes the schema of a tuple that contain all of array of fieldType and array of fieldName from a table data which can be load from Catalog class through loadSchema(). We can get instances from TupleDesc through Database.java. Catalog is the class which keeps track of all available tables in the database and their associated schemas. Catalog call Heapfile and TupleDesc to store data load from .dat to call addTable(), so from Catalog we can get TupleDesc and DbFile through getTupleDesc()and getDatabaseFile(). We can get instances from Catalog through Database.java. Next, we implemented BufferPool with getPage() as we know that from BufferPool we can get getPageSize(), getPage(), DEFAULT_PAGE_SIZE, and DEFAULT_PAGES. Moreover, from BufferPool that we can manage the reading and writing of pages into memory from disk. Next, HeapPage is a set of bytes of data read from disk with slots of the page and number of tuple slots. All of HeapPage's instance can store data for one page of HeapFiles and implements the Page interface that is used by BufferPool. HeapPage gets instances of TupleDesc, HeapPageId, array of tuples and headers and return getNumTuples(), getHeaderSize(), HeapPage, HeapPageId, createEmptyPageData(), getPageData(), and others method that we can modify Tuples which are not in lab1. Next, HeapFile implemented DbFile that stores a collection of tuples in any order and works similar with HeapPage. From BufferPool, We can call readPage(), writePage(), insertTuple(), deleteTuple(), getFile(), and getTupleDesc() from HeapFile through DbFile interface. HeapFile can return object of DbFileIterator that HeapFile calls HeapFileDbIterator which implemented interface of DbFileIterator. The last one is SeqScan which implemented OpIterator connect with Database.java through DbFile interface. SeqScan can access method that reads each tuple of a table in any order by open(), getTupleDesc(), hasNext() and next() to get instances of table through Catalog.
 
I just had one decision that it was very hard for me to get a new object DbFileIterator from HeapFile because DbFileIterator is an 
interface, so my decision is make a new class HeapFileDbIterator and implemented interface of DbFileIterator. Implementing HeapPage is very tricky to compute the number of bytes in the header of a page, isSlotUsed(), and getHeaderSize(). I faced Array Index Out Of Bounds Exception in getHeaderSize() which it took two days to fix it after that I could address the error that I was not catch the Integer to Double.
 
I have one example to improve the test that we can add the testSmall from ScanTest to HeapPageReadTest because I have error in HeapPage, but I did not know until I ran the ScanTest which took me a lot of time to fix it because I did know where was the error come from.
 
I did not change anything to the API.
 
I think I do not have any missing element of my code. I believe that my code is correct.