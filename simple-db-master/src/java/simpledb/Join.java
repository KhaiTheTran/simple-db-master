package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
	
    private JoinPredicate p;
   
  
    private OpIterator[] chidren;
    private Iterator<Tuple> iter;
    private ArrayList<Tuple> tuplist = new ArrayList<>();
    
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
    	this.p = p;
    	chidren = new OpIterator[2];
    	this.chidren[0] = child1;
    	chidren[1] = child2;

    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return chidren[0].getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return chidren[1].getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
    	
        return TupleDesc.merge(chidren[0].getTupleDesc(), chidren[1].getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	super.open();
    	chidren[0].open();
    	chidren[1].open();
    }

    public void close() {
        // some code goes here
    	super.close();
    	chidren[0].close();
    	chidren[1].close();
    	
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	
    	this.close();
    	this.open();
    	
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	
    	while(chidren[0].hasNext()) {
    		chidren[1].rewind();
    		Tuple t0 = chidren[0].next();
    		while(chidren[1].hasNext()) {
    			
    			Tuple t1 = chidren[1].next();
    			
    			if(p.filter(t0, t1)) {
    				int i, index =0;
    				Tuple tamp = new Tuple(this.getTupleDesc());
    				for(i=0;i< chidren[0].getTupleDesc().numFields();i++) {
    					tamp.setField(index, t0.getField(i));
    					index++;
    				}
    				
    				for(i= 0; i < chidren[1].getTupleDesc().numFields();i++) {
    					tamp.setField(index, t1.getField(i));
    					index++;
    				}
    				tuplist.add(tamp);
    			}
    		}
    		iter = tuplist.iterator();
    	}
    	
    	if(iter != null && iter.hasNext()) return iter.next();
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return chidren;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    	chidren[0] = children[0];
    	chidren[1] = children[1];
    }

}
